version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "Installing pnpm..."
      - npm install -g pnpm
      - echo "Installing dependencies..."
      - pnpm install --frozen-lockfile
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - FRONTEND_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_FRONTEND_REPOSITORY_NAME
      - BACKEND_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_REPOSITORY_NAME
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}
  build:
    commands:
      - echo "Building the frontend Docker image..."
      - docker build --build-arg TURBO_TOKEN=${TURBO_TOKEN} --build-arg TURBO_TEAM=${TURBO_TEAM} --cache-from $FRONTEND_REPO:cache -t $FRONTEND_REPO:$IMAGE_TAG -f apps/frontend/Dockerfile .
      - echo "Building the backend Docker image..."
      - docker build --build-arg TURBO_TOKEN=${TURBO_TOKEN} --build-arg TURBO_TEAM=${TURBO_TEAM} --cache-from $BACKEND_REPO:cache -t $BACKEND_REPO:$IMAGE_TAG -f apps/backend/Dockerfile .
  post_build:
    commands:
      - echo "Pushing the frontend Docker image to ECR..."
      - docker tag $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_REPO:cache
      - docker push $FRONTEND_REPO:$IMAGE_TAG
      - docker push $FRONTEND_REPO:cache
      - echo "Pushing the backend Docker image to ECR..."
      - docker tag $BACKEND_REPO:$IMAGE_TAG $BACKEND_REPO:cache
      - docker push $BACKEND_REPO:$IMAGE_TAG
      - docker push $BACKEND_REPO:cache
      - echo "Writing image definitions file..."
      - printf '[{"name":"frontend-container","imageUri":"%s"},{"name":"backend-container","imageUri":"%s"}]' $FRONTEND_REPO:$IMAGE_TAG $BACKEND_REPO:$IMAGE_TAG > imagedefinitions.json
      - echo "Updating frontend task definition..."
      - FRONTEND_IMAGE_URI=$(jq -r '.[0].imageUri' imagedefinitions.json)
      - sed -i "s|\"image\": \"<placeholder>\"|\"image\": \"$FRONTEND_IMAGE_URI\"|" task-definition.json
      - aws ecs register-task-definition --cli-input-json file://task-definition.json --region ap-northeast-2
      - echo "Updating backend task definition..."
      - BACKEND_IMAGE_URI=$(jq -r '.[1].imageUri' imagedefinitions.json)
      - sed -i "s|\"image\": \"<placeholder>\"|\"image\": \"$BACKEND_IMAGE_URI\"|" task-definition-backend.json
      - aws ecs register-task-definition --cli-input-json file://task-definition-backend.json --region ap-northeast-2
      - echo "Updating ECS services..."
      - aws ecs update-service --cluster inter-persona-cluster --service inter-persona-frontend-service --task-definition inter-persona-new --force-new-deployment --region ap-northeast-2
      - aws ecs update-service --cluster inter-persona-cluster --service inter-persona-backend-service --task-definition inter-persona-backend --force-new-deployment --region ap-northeast-2
artifacts:
  files:
    - imagedefinitions.json
cache:
  paths:
    - node_modules/**/*
    - .turbo/**/*
    - /root/.cache/docker/**/*
    